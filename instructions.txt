
دليل إعداد مشروع dbt و DuckDB
هذا الدليل يوضح خطوات إعداد مشروع dbt من البداية، بدءًا من تثبيت DuckDB وصولاً إلى بناء أول نموذج dbt.

الخطوة 1: تثبيت DuckDB
DuckDB هو نظام قاعدة بيانات يعمل كملف واحد، لذا لا يحتاج إلى تثبيت معقد. ما عليك سوى تنزيل ملف DuckDB القابل للتنفيذ.

قم بتنزيل ملف duckdb.exe:

اذهب إلى صفحة تنزيل DuckDB الرسمية: https://duckdb.org/docs/installation/.

من قسم "Windows"، قم بتنزيل أحدث إصدار من ملف duckdb.exe.

ضع هذا الملف في مكان يسهل الوصول إليه، مثل مجلد مشروعك retail_project.

الخطوة 2: إعداد مشروع dbt
هذه الخطوة تُنشئ مجلدات وملفات dbt الأساسية.

افتح الطرفية (PowerShell) وانتقل إلى المجلد الذي ترغب في إنشاء مشروعك فيه.

قم بإنشاء مجلد لمشروعك أولاً:

Bash

mkdir dbt_project
cd dbt_project
شغّل أمر dbt init لإنشاء هيكل المشروع:

Bash

dbt init
أثناء الإعداد، اختر duckdb كقاعدة بيانات وأدخل مسار ملف قاعدة البيانات الخاص بك، على سبيل المثال: C:/Users/DELL/Documents/dbt_database.duckdb.

الخطوة 3: إنشاء وتعبئة جداول البيانات الأولية
الآن سنقوم بإنشاء الجداول الأولية التي سيعمل عليها dbt.

تأكد من أن ملف duckdb.exe موجود داخل مجلد retail_project.

شغّل الأمر التالي لفتح DuckDB CLI:

Bash

.\duckdb.exe C:/Users/DELL/Documents/dbt_database.duckdb
الصق الكود التالي بالكامل في الطرفية واضغط Enter. هذا الكود سيقوم بإنشاء المخطط والجداول وتعبئتها:

SQL

-- Drop the schema and all its contents if it exists, to ensure a clean slate
DROP SCHEMA IF EXISTS retail CASCADE;
CREATE SCHEMA retail;

-- Customer Dimension
CREATE TABLE retail.dim_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    region VARCHAR(50),
    signup_date DATE
);

-- Product Dimension
CREATE TABLE retail.dim_products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10,2)
);

-- Store Dimension
CREATE TABLE retail.dim_stores (
    store_id INT PRIMARY KEY,
    store_name VARCHAR(100),
    location VARCHAR(100),
    manager_name VARCHAR(100)
);

-- Time Dimension
CREATE TABLE retail.dim_time (
    date_id DATE PRIMARY KEY,
    year INT,
    quarter INT,
    month INT,
    day INT,
    day_of_week VARCHAR(20)
);

-- Employee Dimension
CREATE TABLE retail.dim_employees (
    employee_id INT PRIMARY KEY,
    employee_name TEXT,
    department TEXT,
    employment_type TEXT,
    hire_date DATE,
    store_id INT
);

-- Fact Sales
CREATE TABLE retail.fact_sales (
    sale_id INT PRIMARY KEY,
    customer_id INT REFERENCES retail.dim_customers(customer_id),
    product_id INT REFERENCES retail.dim_products(product_id),
    store_id INT REFERENCES retail.dim_stores(store_id),
    sale_date DATE REFERENCES retail.dim_time(date_id),
    quantity_sold INT,
    total_amount DECIMAL(10,2)
);

-- Fact Inventory
CREATE TABLE retail.fact_inventory (
    inventory_id INT PRIMARY KEY,
    product_id INT REFERENCES retail.dim_products(product_id),
    store_id INT REFERENCES retail.dim_stores(store_id),
    stock_date DATE REFERENCES retail.dim_time(date_id),
    stock_level INT
);

-- Insert data into Dimension Tables first
INSERT INTO retail.dim_customers
SELECT
    ROW_NUMBER() OVER() AS customer_id,
    'Customer_' || ROW_NUMBER() OVER() AS customer_name,
    'customer' || ROW_NUMBER() OVER() || '@example.com' AS email,
    CASE
        WHEN ROW_NUMBER() OVER() % 4 = 0 THEN 'North'
        WHEN ROW_NUMBER() OVER() % 4 = 1 THEN 'South'
        WHEN ROW_NUMBER() OVER() % 4 = 2 THEN 'East'
        ELSE 'West'
    END AS region,
    CAST(CURRENT_DATE - (FLOOR(RANDOM() * 3650) * INTERVAL '1 day') AS DATE) AS signup_date
FROM range(100000);

INSERT INTO retail.dim_products
SELECT
    ROW_NUMBER() OVER() AS product_id,
    'Product_' || ROW_NUMBER() OVER() AS product_name,
    CASE
        WHEN ROW_NUMBER() OVER() % 3 = 0 THEN 'Electronics'
        WHEN ROW_NUMBER() OVER() % 3 = 1 THEN 'Clothing'
        ELSE 'Home & Kitchen'
    END AS category,
    ROUND(RANDOM() * 500 + 5, 2) AS price
FROM range(500);

INSERT INTO retail.dim_stores
SELECT
    ROW_NUMBER() OVER() AS store_id,
    'Store_' || ROW_NUMBER() OVER() AS store_name,
    CASE
        WHEN ROW_NUMBER() OVER() % 4 = 0 THEN 'New York'
        WHEN ROW_NUMBER() OVER() % 4 = 1 THEN 'Los Angeles'
        WHEN ROW_NUMBER() OVER() % 4 = 2 THEN 'Chicago'
        ELSE 'Houston'
    END AS location,
    'Manager_' || ROW_NUMBER() OVER() AS manager_name
FROM range(100);

INSERT INTO retail.dim_employees (employee_id, employee_name, department, employment_type, hire_date, store_id)
SELECT
    CAST(ROW_NUMBER() OVER() AS INTEGER) AS employee_id,
    'Employee_' || CAST(ROW_NUMBER() OVER() AS TEXT) AS employee_name,
    CASE
        WHEN ROW_NUMBER() OVER() % 3 = 0 THEN 'HR'
        WHEN ROW_NUMBER() OVER() % 3 = 1 THEN 'Sales'
        ELSE 'Operations'
    END AS department,
    CASE
        WHEN ROW_NUMBER() OVER() % 2 = 0 THEN 'Full-time'
        ELSE 'Part-time'
    END AS employment_type,
    CAST(CURRENT_DATE - (FLOOR(RANDOM() * 3650) * INTERVAL '1 day') AS DATE) AS hire_date,
    CAST((ROW_NUMBER() OVER() % 5) + 1 AS INT) AS store_id
FROM range(10000);

CREATE TEMPORARY TABLE temp_date_series AS
SELECT CAST(CURRENT_DATE - (ROW_NUMBER() OVER() - 1) * INTERVAL '1 day' AS DATE) AS date_id
FROM range(5000);

INSERT INTO retail.dim_time (date_id, year, quarter, month, day, day_of_week)
SELECT
    date_id,
    EXTRACT(YEAR FROM date_id) AS year,
    EXTRACT(QUARTER FROM date_id) AS quarter,
    EXTRACT(MONTH FROM date_id) AS month,
    EXTRACT(DAY FROM date_id) AS day,
    strftime('%A', date_id) AS day_of_week
FROM temp_date_series;
DROP TABLE temp_date_series;

DROP TABLE IF EXISTS retail.fact_sales;
CREATE TABLE retail.fact_sales (
    sale_id INT PRIMARY KEY,
    customer_id INT REFERENCES retail.dim_customers(customer_id),
    product_id INT REFERENCES retail.dim_products(product_id),
    store_id INT REFERENCES retail.dim_stores(store_id),
    sale_date DATE REFERENCES retail.dim_time(date_id),
    quantity_sold INT,
    total_amount DECIMAL(10,2)
);
INSERT INTO retail.fact_sales
SELECT
    ROW_NUMBER() OVER() AS sale_id,
    FLOOR(RANDOM() * 100000) + 1 AS customer_id,
    FLOOR(RANDOM() * 500) + 1 AS product_id,
    FLOOR(RANDOM() * 100) + 1 AS store_id,
    CAST(CURRENT_DATE - (FLOOR(RANDOM() * 1825) * INTERVAL '1 day') AS DATE) AS sale_date,
    FLOOR(RANDOM() * 100) + 1 AS quantity_sold,
    ROUND((FLOOR(RANDOM() * 100) + 1) * (FLOOR(RANDOM() * 100) + 5), 2) AS total_amount
FROM range(1000000);

INSERT INTO retail.fact_inventory
SELECT
    ROW_NUMBER() OVER() AS inventory_id,
    FLOOR(RANDOM() * 500) + 1 AS product_id,
    FLOOR(RANDOM() * 100) + 1 AS store_id,
    CAST(CURRENT_DATE - (FLOOR(RANDOM() * 1825) * INTERVAL '1 day') AS DATE) AS stock_date,
    FLOOR(RANDOM() * 100) + 1 AS stock_level
FROM range(500000);
الخطوة 4: تعريف مصادر البيانات في dbt
هذه الخطوة تسمح لـ dbt بالتعرف على جداولك الأولية.

أنشئ ملفًا باسم sources.yml داخل مجلد retail_project/models.

الصق الكود التالي في الملف:

YAML

version: 2

sources:
  - name: retail
    description: This is the raw data schema for the retail project.
    database: dbt_database
    tables:
      - name: dim_customers
      - name: dim_products
      - name: dim_stores
      - name: dim_time
      - name: dim_employees
      - name: fact_sales
      - name: fact_inventory
الخطوة 5: إنشاء أول نموذج staging
الآن يمكنك بناء أول نموذج dbt، والذي سيقوم بتنظيف وتحضير بياناتك الأولية.

أنشئ ملف SQL جديد باسم stg_customers.sql داخل مجلد retail_project/models.

الصق هذا الكود بداخله:

SQL

SELECT
  customer_id,
  customer_name,
  email,
  region,
  signup_date
FROM {{ source('retail', 'dim_customers') }}
الخطوة 6: تشغيل المشروع والتحقق من النموذج
أخيرًا، قم بتشغيل مشروع dbt لتنفيذ جميع النماذج.

تأكد أنك في مجلد retail_project في الطرفية.

شغّل أمر dbt run:

Bash

dbt run
للتحقق: يمكنك عرض محتويات هذا النموذج الجديد داخل DuckDB CLI:

SQL

D .\duckdb.exe C:/Users/DELL/Documents/dbt_database.duckdb
D SELECT * FROM main.stg_customers LIMIT 10;